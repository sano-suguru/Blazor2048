@page "/game"
@using Blazor2048.Components
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Web
@using Blazor2048.Core
@using Blazor2048.GameLogic
@implements IDisposable

<div class="game-container">
    <div class="score-container">
        <span>スコア</span>
        <span class="score-value">@gameManager.CurrentScore.Value</span>
    </div>

    @if (gameOver)
    {
        <div class="game-over">
            <h2>ゲームオーバー！</h2>
            <button @onclick="RestartGame">もう一度プレイ</button>
        </div>
    }

    <GameBoard Board="gameManager.Board" OnKeyPress="HandleKeyPress" />
</div>

@code {
    [Inject] private IGameManager gameManager { get; set; } = default!;
    [Inject] private ILogger<Game> logger { get; set; } = default!;
    private bool gameOver = false;

    protected override void OnInitialized()
    {
        gameManager.ScoreChanged += HandleScoreChanged;
        gameManager.GameOver += HandleGameOver;
    }

    private void HandleScoreChanged(object? sender, Score score)
    {
        logger.LogInformation("Score updated to: {Score}", score.Value);
        StateHasChanged();
    }

    private void HandleGameOver(object? sender, EventArgs e)
    {
        logger.LogInformation("Game over triggered");
        gameOver = true;
        StateHasChanged();
    }

    private void HandleKeyPress(KeyboardEventArgs e)
    {
        if (gameOver) return;

        Direction? direction = e.Key switch
        {
            "ArrowUp" => Direction.Up,
            "ArrowDown" => Direction.Down,
            "ArrowLeft" => Direction.Left,
            "ArrowRight" => Direction.Right,
            _ => null
        };

        if (direction.HasValue)
        {
            try
            {
                gameManager.Move(direction.Value);
            }
            catch (GameException ex)
            {
                logger.LogError(ex, "Error processing move");
            }
        }
    }

    private void RestartGame()
    {
        logger.LogInformation("Restarting game");
        gameManager.Restart();
        gameOver = false;
        StateHasChanged();
    }

    public void Dispose()
    {
        gameManager.ScoreChanged -= HandleScoreChanged;
        gameManager.GameOver -= HandleGameOver;
    }
}
