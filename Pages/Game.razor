@page "/game"
@using Blazor2048.Components
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Web
@using Blazor2048.Core
@using Blazor2048.GameLogic
@implements IDisposable

<div class="game-container">
    <ScoreDisplay Score="@gameManager.State.CurrentScore" />

    @if (gameManager.State.IsGameOver)
    {
        <div class="game-over" role="alert">
            <h2>@GameConstants.UI.GameOverMessage</h2>
            <button @onclick="RestartGame" class="restart-button">
                @GameConstants.UI.RestartButtonText
            </button>
        </div>
    }

    <ErrorBoundary>
        <ChildContent>
            <GameBoard Board="gameManager.Board" OnKeyPress="HandleKeyPress" />
        </ChildContent>
        <ErrorContent>
            <div class="error-message" role="alert">
                申し訳ありません。エラーが発生しました。
                <button @onclick="RestartGame">ゲームをリスタート</button>
            </div>
        </ErrorContent>
    </ErrorBoundary>
</div>

@code {
    [Inject] private IGameManager gameManager { get; set; } = default!;
    [Inject] private ILogger<Game> logger { get; set; } = default!;

    protected override void OnInitialized()
    {
        gameManager.StateChanged += HandleStateChanged;
        gameManager.TileMerged += HandleTileMerged;
    }

    private void HandleStateChanged(object? sender, GameState state)
    {
        logger.LogInformation("Game state updated: Score={Score}, GameOver={IsGameOver}",
        state.CurrentScore.Value, state.IsGameOver);
        StateHasChanged();
    }

    private void HandleTileMerged(object? sender, TileMergedEventArgs e)
    {
        logger.LogDebug("Tile merged: {OldValue} -> {NewValue} at position {Position}",
        e.OldValue, e.NewValue, e.Position);
    }

    private void HandleKeyPress(KeyboardEventArgs e)
    {
        if (gameManager.State.IsGameOver) return;

        if (Move.FromKeyboardEvent(e) is Move move)
        {
            try
            {
                gameManager.Move(move.Direction);
            }
            catch (GameException ex)
            {
                logger.LogError(ex, "Error processing move");
            }
        }
    }

    private void RestartGame()
    {
        logger.LogInformation("Restarting game");
        gameManager.Restart();
    }

    public void Dispose()
    {
        logger.LogInformation("Disposing Game component");
        gameManager.StateChanged -= HandleStateChanged;
        gameManager.TileMerged -= HandleTileMerged;
    }
}
